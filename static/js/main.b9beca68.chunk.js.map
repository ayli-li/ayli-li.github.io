{"version":3,"sources":["components/CreateColumnForm/CreateColumnFormStyled.js","components/ColumnItem/ColumnItemStyled.js","components/ColumnList/ColumnListStyled.js","components/CreateColumnForm/CreateColumnForm.jsx","components/CreateTaskForm/CreateTaskFormStyled.js","components/CreateTaskForm/CreateTaskForm.jsx","store/task/constants.js","store/task/action.js","components/TaskModal/TaskModalStyled.js","components/TaskModal/TaskModal.jsx","components/CardTask/CardTaskStyled.js","components/CardTask/CardTask.jsx","store/column/constants.js","store/column/action.js","components/ColumnItem/ColumnItem.jsx","components/DarkMode/Toggle.jsx","components/DarkMode/DarkModeToggle.jsx","store/columnOrder/constants.js","components/ColumnList/ColumnList.jsx","store/columnOrder/action.js","App.js","utils/createReducer.js","store/store.js","store/column/reducer.js","store/task/reducer.js","store/columnOrder/reducer.js","store/rootReducer.js","index.js"],"names":["ColumnCreator","styled","div","ColumnForm","form","props","formTextarea","ColumnTitleInput","input","attrs","type","LiColumn","li","ColumnTitleItems","ColumnTitle","span","CloseSign","ColumnItems","UlTasks","ul","isDraggingOver","Container","Columns","UlColumns","Btn","button","deleteTask","addTask","addColumn","description","CreateColumnForm","value","setValue","resetAddingColumn","onSubmit","e","preventDefault","handleSubmit","onChange","target","onClick","TaskTextarea","textarea","CreateTaskForm","resetAddingTask","autoFocus","rows","cols","onKeyDown","keyCode","shiftKey","onEnterPress","placeholder","ADD_TASK","REMOVE_TASK","ADD_DESCRIPTION","RENAME_TASK","removeTask","id","addTaskDescription","descriptionCard","ModalOverlay","ModalWindow","ModalHeader","ModalTitle","ModalFormContent","ModalForm","ModalDescription","DescriptionValue","TaskModal","showModal","columnId","useState","showTaskValueInput","setShowTaskValueInput","showTaskValue","setShowTaskValue","taskValueInput","setTaskValueInput","showModalForm","setShowModalForm","modalDescription","setModalDescription","dispatch","useDispatch","clickedOutside","setClickedOutside","myRef","useRef","handleClickOutside","current","contains","useEffect","document","addEventListener","removeEventListener","renameTask","renameTaskInModal","handleFormSubmit","ref","onDoubleClick","className","LiTask","TaskValue","isDragging","CardTask","index","isShowModal","setIsShowModal","draggableId","provided","snapshot","innerRef","draggableProps","dragHandleProps","ADD_COLUMN","REMOVE_COLUMN","ADD_TASK_ID","REMOVE_TASK_ID","SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN","SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS","RENAME_COLUMN","removeTaskIdFromColumn","taskId","ColumnItem","title","deleteColumn","columnTasks","titleCard","setTitleCard","columnTitleInput","setColumnTitleInput","isCreateTask","setIsCreateTask","showColumnTitle","setShowColumnTitle","showColumnTitleInput","setShowColumnTitleInput","createTask","task","nanoid","addTaskIdToColumn","handleAddTask","prev","handleDeleteTask","renameColumn","renameColumnTitle","handleShowTitleInput","onOutsideClick","droppableId","droppableProps","Object","keys","length","map","Toggle","checked","htmlFor","DarkModeToggle","darkMode","useDarkMode","enable","toggle","disable","ADD_COLUMN_ORDER","REMOVE_COLUMN_ORDER","SWITCH_COLUMN_ORDER","ColumnList","setTitle","isCreateColumn","setIsCreateColumn","columnList","useSelector","state","columns","tasks","columnOrder","handleDeleteColumnItem","taskIds","forEach","removeColumn","onDragEnd","result","destination","source","newColumnOrder","splice","newOrder","startColumn","finishColumn","startColumnTaskIds","newStartColumn","finishColumnTaskIds","newFinishColumn","switchTasksOrderInTheDifferentColumns","newTaskIds","newColumn","column","direction","App","createReducer","preloadedState","strategyMap","initialState","action","undefined","columnReducer","filter","tasksReducer","columnOrderReducer","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b9beca68.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const ColumnCreator = styled.div`\r\n  width: 100%;\r\n  max-width: 220px;\r\n  box-sizing: border-box;\r\n  height: min-content;\r\n  border: 0.5px solid lightgray;\r\n  border-radius: 5px;\r\n  list-style: none;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: space-between;\r\n  background-color: white;\r\n  padding: 15px;\r\n`;\r\n\r\nexport const ColumnForm = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-between;\r\n  align-items: ${props => (props.formTextarea ? 'flex-start' : 'center')};\r\n  color: #172b4d;\r\n  font-size: 16px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const ColumnTitleInput = styled.input.attrs(props => ({\r\n  type: 'text',\r\n}))`\r\n  border: 0.5px solid lightgray; \r\n  border-radius: 3px;\r\n  max-width: 160px;\r\n  padding: 3px;\r\n  color: #172b4d;\r\n  font-size: 16px;\r\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Noto Sans, Ubuntu, Droid Sans, Helvetica Neue, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;","import styled from 'styled-components';\r\n\r\nexport const LiColumn = styled.li`\r\n  width: 100%;\r\n  max-width: 220px;\r\n  box-sizing: border-box;\r\n  height: min-content;\r\n  margin-right: 50px;\r\n  border: 0.5px solid lightgray;\r\n  border-radius: 5px;\r\n  list-style: none;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: space-between;\r\n  background-color: #fffafa;\r\n  padding: 15px;\r\n  margin-left: 20px;\r\n`;\r\n\r\nexport const ColumnTitleItems = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-between;  \r\n  align-items: flex-start;\r\n  margin-bottom: 10px;\r\n  box-sizing: border-box;\r\n  width: 188.4px;\r\n`;\r\n\r\nexport const ColumnTitle = styled.span`\r\n  color: #172b4d;\r\n  font-size: 18px;\r\n  max-width: 160px;\r\n  font-weight: 500;\r\n  word-wrap: break-word;\r\n  cursor: pointer;  \r\n  margin-top: 3px;\r\n`;\r\n\r\nexport const CloseSign = styled.span`\r\n  cursor: pointer;\r\n  font-size: 22px;\r\n\r\n  :hover {\r\n    color: rgba(0,255,255, 0.7);\r\n    transition: 0.5s;\r\n  }\r\n`;\r\n\r\nexport const ColumnItems = styled.div`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  color: #172b4d;\r\n  font-size: 16px;\r\n`;\r\n\r\nexport const UlTasks = styled.ul`\r\n  margin: 10px 0 0 0;\r\n  padding: 0;  \r\n  background-color: ${props => (props.isDraggingOver ? 'rgba(0,255,255, 0.1)' : 'inherit')};\r\n`;","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  width: 1400px;\r\n  margin: 0 auto;\r\n  height: 100%;\r\n`;\r\n\r\nexport const Columns = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: flex-start;\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\nexport const UlColumns = styled.ul`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: flex-start;  \r\n  overflow: auto;\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0; \r\n  height: 100%;\r\n  max-width: 80%;\r\n  margin-right: 20px;\r\n`;\r\n\r\nexport const Btn = styled.button`\r\n  background-color: ${props => (props.deleteTask || props.addTask ? '#ff9892' : '#fff')};\r\n  min-width: ${props => (props.addColumn ? '115px' : '100%')};\r\n  border: 0.5px solid lightgray;\r\n  color: ${props => (props.deleteTask || props.addTask ? 'white' : '#172b4d')};\r\n  padding: 4px;\r\n  margin: ${props => (props.description ? '0 0 20px 0' : '0')};\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Noto Sans, Ubuntu, Droid Sans, Helvetica Neue, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n\r\n  :hover {\r\n    background-color: ${props => (props.deleteTask ? '#ff736d' : 'rgba(0,255,255,1)')};\r\n    color: ${props => (props.addTask ? 'white' : '#172b4d')};\r\n    transition: 0.5s;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;","import React from 'react';\r\n\r\nimport { ColumnCreator, ColumnForm, ColumnTitleInput } from './CreateColumnFormStyled.js';\r\nimport { CloseSign } from '../ColumnItem/ColumnItemStyled.js';\r\nimport { Btn } from '../ColumnList/ColumnListStyled.js';\r\n\r\nexport const CreateColumnForm = ({ value, setValue, addColumn, resetAddingColumn }) => {\r\n\r\n  const handleSubmit = (e) => {\r\n    addColumn();\r\n    e.preventDefault();\r\n  }\r\n\r\n  return <>\r\n    <ColumnCreator>\r\n      <ColumnForm onSubmit={(e) => handleSubmit(e)}>\r\n        <ColumnTitleInput value={value} onChange={(e) => setValue(e.target.value)} />\r\n        <CloseSign onClick={() => resetAddingColumn()}>&times;</CloseSign>\r\n      </ColumnForm>\r\n\r\n      <Btn onClick={() => addColumn()}>Add column</Btn>\r\n    </ColumnCreator>\r\n  </>\r\n}","import styled from 'styled-components';\r\n\r\nexport const TaskTextarea = styled.textarea`\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  resize: none;\r\n  border: 0.5px solid lightgray;\r\n  border-radius: 3px;\r\n  color: #172b4d;\r\n  font-size: 14px;\r\n  padding: 9px 5px;\r\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Noto Sans, Ubuntu, Droid Sans, Helvetica Neue, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;","import React from 'react';\r\n\r\nimport { TaskTextarea } from './CreateTaskFormStyled.js';\r\nimport { ColumnForm } from '../CreateColumnForm/CreateColumnFormStyled.js';\r\n\r\nexport const CreateTaskForm = ({ value, setValue, resetAddingTask, addTask }) => {\r\n\r\n  const handleSubmit = () => {\r\n    addTask();\r\n  }\r\n\r\n  const onEnterPress = (e) => {\r\n    if (e.keyCode === 13 && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      handleSubmit();\r\n    }\r\n  }\r\n\r\n  return <ColumnForm onSubmit={handleSubmit} formTextarea>    \r\n    <TaskTextarea \r\n      autoFocus={true}\r\n      rows={3} \r\n      cols={21}  \r\n      onChange={(e) => setValue(e.target.value)}\r\n      onKeyDown={(e) => onEnterPress(e)} \r\n      placeholder=\"Input title card\" />\r\n  </ColumnForm>\r\n}","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\n\r\nexport const ADD_DESCRIPTION = 'ADD_DESCRIPTION';\r\n\r\nexport const RENAME_TASK = 'RENAME_TASK';","import {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  ADD_DESCRIPTION,\r\n  RENAME_TASK\r\n} from './constants';\r\n\r\nexport const addTask = (task) => ({\r\n  type: ADD_TASK,\r\n  task\r\n});\r\n\r\nexport const removeTask = (id) => ({\r\n  type: REMOVE_TASK,\r\n  id\r\n});\r\n\r\nexport const addTaskDescription = (descriptionCard, id) => ({\r\n  type: ADD_DESCRIPTION,\r\n  descriptionCard,\r\n  id\r\n});\r\n\r\nexport const renameTaskInModal = (id, value) => ({\r\n  type: RENAME_TASK,\r\n  id,\r\n  value\r\n});","import styled from 'styled-components';\r\n\r\nexport const ModalOverlay = styled.div`\r\n  position: fixed;\r\n  background-color: #31373d;\r\n  opacity: .7;\r\n  height: auto;\r\n  inset: 0;\r\n`;\r\n\r\nexport const ModalWindow = styled.div`\r\n  position: absolute;\r\n  top: 200px;\r\n  left: 0;\r\n  right: 0;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: space-around;\r\n  max-width: 300px;\r\n  width: 100%;\r\n  border: 0.5px solid lightgray;\r\n  background-color: white;\r\n  z-index: 1;\r\n  padding: 20px;\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport const ModalHeader = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: space-between;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const ModalTitle = styled.span`\r\n  font-weight: 500;\r\n  word-break: break-word;\r\n  margin-top: 5px;\r\n  padding-right: 15px;\r\n  padding-left: 3px;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const ModalFormContent = styled.div`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ModalForm = styled.form`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  margin-bottom: 25px;\r\n`;\r\n\r\nexport const ModalDescription = styled.div`\r\n  padding-left: 3px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const DescriptionValue = styled.div`\r\n  word-break: break-word;\r\n  margin-top: 5px;\r\n  padding-left: 10px;\r\n  cursor: pointer;\r\n`;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { addTaskDescription, renameTaskInModal } from '../../store/task/action';\r\n\r\nimport { ModalOverlay, ModalWindow, ModalHeader, ModalTitle, ModalFormContent, ModalForm, ModalDescription, DescriptionValue } from './TaskModalStyled.js';\r\nimport { CloseSign } from '../ColumnItem/ColumnItemStyled.js';\r\nimport { ColumnTitleInput } from '../CreateColumnForm/CreateColumnFormStyled.js';\r\nimport { TaskTextarea } from '../CreateTaskForm/CreateTaskFormStyled.js';\r\nimport { Btn } from '../ColumnList/ColumnListStyled.js';\r\n\r\nexport const TaskModal = ({ value, showModal, description, id, columnId, deleteTask }) => {\r\n\r\n  const [showTaskValueInput, setShowTaskValueInput] = useState(false);\r\n  const [showTaskValue, setShowTaskValue] = useState(true);\r\n  const [taskValueInput, setTaskValueInput] = useState(value);\r\n  const [showModalForm, setShowModalForm] = useState(true);\r\n  const [modalDescription, setModalDescription] = useState(description);  \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [clickedOutside, setClickedOutside] = useState(false);\r\n  const myRef = useRef();\r\n\r\n  const handleClickOutside = (e) => {\r\n    if (!myRef.current.contains(e.target)) {\r\n      setClickedOutside(true);\r\n    }\r\n  };\r\n\r\n  const handleClickInside = () => setClickedOutside(false);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => document.removeEventListener('mousedown', handleClickOutside);\r\n  });\r\n\r\n  useEffect(() => {\r\n    showModal(!clickedOutside);\r\n  }, [clickedOutside, showModal]);\r\n\r\n  useEffect(() => {\r\n    if (description) {\r\n      setShowModalForm(false);\r\n    }\r\n  }, [description,setShowModalForm]);\r\n\r\n  const addDescription = () => {\r\n    if (modalDescription) {\r\n      dispatch(addTaskDescription(modalDescription, id));\r\n      setShowModalForm(false);\r\n    }           \r\n  }\r\n\r\n  const renameTask = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (taskValueInput) {\r\n      dispatch(renameTaskInModal(id, taskValueInput));\r\n      setShowTaskValue(true);\r\n      setShowTaskValueInput(false);\r\n    }\r\n  }\r\n\r\n  const handleDeleteTask = () => {\r\n    deleteTask(id, columnId);\r\n    showModal(false);\r\n  }\r\n\r\n  const handleFormSubmit = () => {\r\n    if (modalDescription) {\r\n      dispatch(addTaskDescription(modalDescription, id));\r\n      setShowModalForm(false);\r\n    }     \r\n  }\r\n\r\n  const onEnterPress = (e) => {\r\n    if (e.keyCode === 13 && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      handleFormSubmit();\r\n    }\r\n  }\r\n\r\n  const handleShowTaskValue = () => {\r\n    setShowTaskValue(false);\r\n    setShowTaskValueInput(true);\r\n  }\r\n\r\n  return <>\r\n    <ModalOverlay />\r\n\r\n    <ModalWindow ref={myRef} onClick={handleClickInside} >\r\n\r\n      <ModalHeader>\r\n        {showTaskValue && \r\n          <ModalTitle onDoubleClick={handleShowTaskValue}>\r\n            {value}\r\n          </ModalTitle> }\r\n\r\n        {showTaskValueInput && \r\n          <form onSubmit={(e) => renameTask(e)}>\r\n            <ColumnTitleInput onChange={(e) => setTaskValueInput(e.target.value)} value={taskValueInput}/>\r\n          </form> }\r\n\r\n        <CloseSign className='close_symbol' onClick={() => showModal(false) }>&times;</CloseSign>\r\n      </ModalHeader>\r\n\r\n      {showModalForm && \r\n        <ModalFormContent>\r\n          <ModalForm onSubmit={handleFormSubmit}>\r\n            <TaskTextarea\r\n              rows={3}\r\n              cols={30}               \r\n              onChange={(e) => setModalDescription(e.target.value) }\r\n              onKeyDown={(e) => onEnterPress(e)}\r\n              placeholder=\"Input task's description\"\r\n              value={modalDescription} />\r\n          </ModalForm>\r\n\r\n          <Btn description onClick={addDescription}>Add description</Btn>\r\n        </ModalFormContent> }\r\n\r\n      {description && !showModalForm &&\r\n        <ModalDescription>\r\n          Description: \r\n          <DescriptionValue onDoubleClick={() => setShowModalForm(true) } >\r\n            {description}\r\n          </DescriptionValue>\r\n        </ModalDescription> }\r\n\r\n      <Btn deleteTask onClick={handleDeleteTask}>Delete task</Btn>\r\n    </ModalWindow>\r\n  </>\r\n}","import styled from 'styled-components';\r\n\r\nexport const LiTask = styled.li`\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const TaskValue = styled.div`\r\n  vertical-align: center;\r\n  box-sizing: border-box;\r\n  padding: 9px 5px;\r\n  width: 189px;\r\n  border: 0.5px solid lightgray;\r\n  list-style: none;\r\n  border-radius: 3px;\r\n  font-size: 14px;\r\n  word-wrap: break-word;\r\n  color: ${props => (props.isDragging ? 'white' : '#172b4d')};\r\n  background-color: ${props => (props.isDragging ? '#ff9892' : 'white')};\r\n\r\n  :hover {\r\n    color: #fffffa;\r\n    background-color: #ff9892;\r\n    transition: 0.5s;\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\nimport { TaskModal } from '../TaskModal/TaskModal';\r\n\r\nimport { LiTask, TaskValue } from './CardTaskStyled.js';\r\n\r\nexport const CardTask = ({ id, value, columnId, description, deleteTask, index }) => { \r\n\r\n  const [isShowModal, setIsShowModal] = useState(false);\r\n\r\n  return <Draggable key={id} draggableId={id} index={index}>\r\n    {(provided, snapshot) => (\r\n\r\n      <LiTask \r\n        ref={provided.innerRef} \r\n        {...provided.draggableProps}\r\n        id={id} >\r\n\r\n        <TaskValue \r\n          isDragging={snapshot.isDragging} \r\n          {...provided.dragHandleProps} \r\n          onClick={() => setIsShowModal(true)} >\r\n          {value}          \r\n        </TaskValue>          \r\n        \r\n        {isShowModal && \r\n          <TaskModal\r\n            id={id}\r\n            columnId={columnId}\r\n            value={value}\r\n            description={description}\r\n            showModal={setIsShowModal}\r\n            deleteTask={deleteTask} /> }                 \r\n      </LiTask>\r\n    )}\r\n  </Draggable>\r\n}","export const ADD_COLUMN = 'ADD_COLUMN';\r\nexport const REMOVE_COLUMN = 'REMOVE_COLUMN';\r\n\r\nexport const ADD_TASK_ID = 'ADD_TASK_ID';\r\nexport const REMOVE_TASK_ID = 'REMOVE_TASK_ID';\r\n\r\nexport const SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN = 'SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN';\r\nexport const SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS = 'SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS';\r\n\r\nexport const RENAME_COLUMN = 'RENAME_COLUMN';","import {\r\n  ADD_COLUMN,\r\n  REMOVE_COLUMN,\r\n  ADD_TASK_ID,\r\n  REMOVE_TASK_ID,\r\n  SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN,\r\n  SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS,\r\n  RENAME_COLUMN\r\n} from './constants';\r\n\r\nexport const addColumn = (column) => ({\r\n  type: ADD_COLUMN,\r\n  column\r\n});\r\n\r\nexport const removeColumn = (id) => ({\r\n  type: REMOVE_COLUMN,\r\n  id\r\n});\r\n\r\nexport const addTaskIdToColumn = (taskId, columnId) => ({\r\n  type: ADD_TASK_ID,\r\n  taskId,\r\n  columnId\r\n});\r\n\r\nexport const removeTaskIdFromColumn = (taskId, columnId) => ({\r\n  type: REMOVE_TASK_ID,\r\n  taskId,\r\n  columnId\r\n});\r\n\r\nexport const switchTasksOrderInTheSameColumn = (column) => ({\r\n  type: SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN,\r\n  column\r\n});\r\n\r\nexport const switchTasksOrderInTheDifferentColumns = (startColumn, finishColumn) => ({\r\n  type: SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS,\r\n  startColumn,\r\n  finishColumn\r\n});\r\n\r\nexport const renameColumnTitle = (id, title) => ({\r\n  type: RENAME_COLUMN,\r\n  id,\r\n  title\r\n});","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport OutsideClickHandler from 'react-outside-click-handler';\r\n\r\nimport { CreateTaskForm } from '../CreateTaskForm/CreateTaskForm';\r\nimport { CardTask } from '../CardTask/CardTask';\r\n\r\nimport { addTask, removeTask } from '../../store/task/action';\r\nimport { addTaskIdToColumn, removeTaskIdFromColumn, renameColumnTitle } from '../../store/column/action';\r\n\r\nimport { LiColumn, ColumnTitleItems, ColumnTitle, CloseSign, ColumnItems, UlTasks } from './ColumnItemStyled.js';\r\nimport { ColumnTitleInput } from '../CreateColumnForm/CreateColumnFormStyled.js';\r\nimport { Btn } from '../ColumnList/ColumnListStyled.js';\r\n\r\nexport const ColumnItem = ({ title, \r\n                             deleteColumn, \r\n                             columnId, \r\n                             columnTasks, \r\n                             index }) => {\r\n\r\n  \r\n  const [titleCard, setTitleCard] = useState('');\r\n  const [columnTitleInput, setColumnTitleInput] = useState(title);\r\n  const [isCreateTask, setIsCreateTask] = useState(false);\r\n  const [showColumnTitle, setShowColumnTitle] = useState(true);\r\n  const [showColumnTitleInput, setShowColumnTitleInput] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const createTask = () => {\r\n    if (titleCard) {\r\n      const task = {\r\n        id: nanoid(),\r\n        titleCard,\r\n        descriptionCard: '',\r\n        columnId\r\n      };\r\n\r\n      dispatch(addTask(task));\r\n      dispatch(addTaskIdToColumn(task.id, columnId));\r\n      setTitleCard('');      \r\n    }; \r\n  }\r\n\r\n  const handleAddTask = () => {\r\n    if (titleCard && isCreateTask) {\r\n      createTask();\r\n    }\r\n\r\n    setIsCreateTask(prev => !prev);\r\n  }\r\n\r\n  const handleDeleteTask = (id, columnId) => {\r\n    dispatch(removeTask(id));\r\n    dispatch(removeTaskIdFromColumn(id, columnId));\r\n  }\r\n\r\n  const renameColumn = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (columnTitleInput) {      \r\n      dispatch(renameColumnTitle(columnId, columnTitleInput));\r\n      setShowColumnTitle(true);\r\n      setShowColumnTitleInput(false);\r\n    }\r\n  }\r\n\r\n  const handleShowTitleInput = () => {\r\n    setColumnTitleInput(title);\r\n    setShowColumnTitle(false);\r\n    setShowColumnTitleInput(true);\r\n  }\r\n\r\n  const handleShowOutsideTitleInput = () => {\r\n    setShowColumnTitle(true);\r\n    setShowColumnTitleInput(false);\r\n  }\r\n\r\n  return <>\r\n    <Draggable draggableId={columnId} index={index} key={columnId}>\r\n\r\n      {(provided, snapshot) => (\r\n\r\n        <LiColumn \r\n          {...provided.draggableProps}\r\n          ref={provided.innerRef}\r\n          isDragging={snapshot.isDragging}>\r\n          \r\n          <OutsideClickHandler onOutsideClick={() => setIsCreateTask(false)}>\r\n            <ColumnItems>\r\n\r\n              <ColumnTitleItems>\r\n                {showColumnTitle &&\r\n                  <ColumnTitle onDoubleClick={handleShowTitleInput} {...provided.dragHandleProps}>\r\n                    {title}\r\n                  </ColumnTitle> }\r\n                \r\n                {showColumnTitleInput &&\r\n                  <OutsideClickHandler onOutsideClick={() => handleShowOutsideTitleInput()}>\r\n\r\n                    <form onSubmit={(e) => renameColumn(e)}>\r\n                      <ColumnTitleInput\r\n                        autoFocus={true} \r\n                        onChange={(e) => setColumnTitleInput(e.target.value)} \r\n                        value={columnTitleInput} />\r\n                    </form>\r\n\r\n                  </OutsideClickHandler> }\r\n\r\n                <CloseSign onClick={() => deleteColumn(columnId) }>&times;</CloseSign>\r\n              </ColumnTitleItems>\r\n\r\n              <Droppable key={columnId} droppableId={columnId} type='task'>\r\n                {(provided, snapshot) => (\r\n\r\n                  <UlTasks \r\n                    {...provided.droppableProps} \r\n                    ref={provided.innerRef}\r\n                    isDraggingOver={snapshot.isDraggingOver} >\r\n\r\n                    {Object.keys(columnTasks).length ?\r\n                      Object.keys(columnTasks).map((task, index) => \r\n                        <CardTask \r\n                          key={columnTasks[task].id}\r\n                          id={columnTasks[task].id} \r\n                          value={columnTasks[task].titleCard} \r\n                          columnId={columnId}\r\n                          description={columnTasks[task].descriptionCard}                       \r\n                          deleteTask={handleDeleteTask}  \r\n                          index={index} /> ) \r\n                    : null }\r\n\r\n                    {provided.placeholder}\r\n\r\n                  </UlTasks>\r\n                )}\r\n              </Droppable>\r\n\r\n              {isCreateTask && \r\n                <CreateTaskForm \r\n                  value={titleCard} \r\n                  setValue={setTitleCard} \r\n                  addTask={handleAddTask} /> }       \r\n\r\n              <Btn addTask onClick={handleAddTask}>Add task</Btn>              \r\n            </ColumnItems> \r\n          </OutsideClickHandler>         \r\n        </LiColumn>      \r\n      )}            \r\n    </Draggable>  \r\n  </>\r\n}","import React from 'react';\r\n\r\nexport const Toggle = ({ checked, onChange }) => (\r\n  <span className=\"toggle-control\">\r\n    <input\r\n      className=\"dmcheck\"\r\n      type=\"checkbox\"\r\n      checked={checked}\r\n      onChange={onChange}\r\n      id=\"dmcheck\"\r\n    />\r\n    <label htmlFor=\"dmcheck\" />\r\n  </span>\r\n);","import React from 'react';\r\nimport useDarkMode from 'use-dark-mode';\r\n\r\nimport './DarkModeStyles.css';\r\nimport { Toggle } from './Toggle';\r\n\r\nexport const DarkModeToggle = () => {\r\n\r\n  const darkMode = useDarkMode(false);\r\n\r\n  return (\r\n    <div className=\"dark-mode-toggle\">\r\n\r\n      <button type=\"button\" onClick={darkMode.enable}>\r\n        ☀\r\n      </button>\r\n\r\n      <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\r\n\r\n      <button type=\"button\" onClick={darkMode.disable}>\r\n        ☾\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};","export const ADD_COLUMN_ORDER = 'ADD_COLUMN_ORDER';\r\n\r\nexport const REMOVE_COLUMN_ORDER = 'REMOVE_COLUMN_ORDER';\r\n\r\nexport const SWITCH_COLUMN_ORDER = 'SWITCH_COLUMN_ORDER';","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nimport { CreateColumnForm } from '../CreateColumnForm/CreateColumnForm';\r\nimport { ColumnItem } from '../ColumnItem/ColumnItem';\r\nimport { DarkModeToggle } from '../DarkMode/DarkModeToggle';\r\n\r\nimport { addColumn, removeColumn, removeTaskIdFromColumn, switchTasksOrderInTheSameColumn, switchTasksOrderInTheDifferentColumns } from '../../store/column/action';\r\nimport { removeTask } from '../../store/task/action';\r\nimport { addColumnOrder, removeColumnOrder, switchColumnOrder } from '../../store/columnOrder/action';\r\n\r\nimport { Container, Columns, UlColumns, Btn } from './ColumnListStyled.js';\r\n\r\nexport const ColumnList = () => {\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [isCreateColumn, setIsCreateColumn] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const columnList = useSelector(state => state.columns.columnList);\r\n  const tasks = useSelector(state => state.tasks.tasks);\r\n  const columnOrder = useSelector(state => state.columnOrder.columnOrder);\r\n\r\n  const handleAddColumn = () => {\r\n\r\n    if (title) {\r\n      const column = {\r\n        id: nanoid(),\r\n        title,\r\n        taskIds: []\r\n      }\r\n\r\n      dispatch(addColumn(column));\r\n      dispatch(addColumnOrder(column.id));\r\n      setIsCreateColumn(false);\r\n      setTitle('');\r\n    }\r\n  }\r\n\r\n  const handleResetAddingColumn = () => setIsCreateColumn(false);\r\n\r\n  const handleDeleteColumnItem = (id) => {\r\n    columnList[id].taskIds.forEach(taskId => dispatch(removeTask(taskId)) && dispatch(removeTaskIdFromColumn(taskId, id)));\r\n    dispatch(removeColumn(id));\r\n    dispatch(removeColumnOrder(id));\r\n  }\r\n\r\n  const handleOnDragEnd = (result) => {\r\n\r\n    const { destination, source, draggableId, type } = result;\r\n    \r\n    if (!destination) return;\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) return;\r\n\r\n    if (type === 'column') {\r\n      const newColumnOrder = [...columnOrder];\r\n      newColumnOrder.splice(source.index, 1);\r\n      newColumnOrder.splice(destination.index, 0, draggableId);\r\n\r\n      dispatch(switchColumnOrder(newColumnOrder));\r\n      return;\r\n    }\r\n\r\n    const startColumn = columnList[source.droppableId];\r\n    const finishColumn = columnList[destination.droppableId];\r\n\r\n    if (startColumn === finishColumn) {\r\n      const newTaskIds = [...startColumn.taskIds];\r\n    \r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...startColumn,\r\n        taskIds: newTaskIds,\r\n      };\r\n\r\n      dispatch(switchTasksOrderInTheSameColumn(newColumn));\r\n      return;\r\n    }\r\n\r\n    const startColumnTaskIds = [...startColumn.taskIds];\r\n  \r\n    startColumnTaskIds.splice(source.index, 1);\r\n\r\n    const newStartColumn = {\r\n      ...startColumn,\r\n      taskIds: startColumnTaskIds,\r\n    };\r\n\r\n    const finishColumnTaskIds = [...finishColumn.taskIds];\r\n    finishColumnTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newFinishColumn = {\r\n      ...finishColumn,\r\n      taskIds: finishColumnTaskIds\r\n    };\r\n\r\n    dispatch(switchTasksOrderInTheDifferentColumns(newStartColumn, newFinishColumn));      \r\n  }\r\n\r\n  return <>\r\n    <Container>\r\n      <DarkModeToggle />\r\n\r\n      <Columns>\r\n\r\n        <DragDropContext onDragEnd={handleOnDragEnd}>\r\n          <Droppable droppableId='all-columns' direction='horizontal' type='column'> \r\n            {provided => (\r\n    \r\n              <UlColumns {...provided.droppableProps}\r\n                         ref={provided.innerRef} >\r\n\r\n                {columnOrder.length ?\r\n                columnOrder.map((columnId, index) => {\r\n                  const column = columnList[columnId];\r\n                  const columnTasks = column.taskIds.map(taskId => tasks[taskId] );\r\n                  \r\n                  return <ColumnItem \r\n                            title={column.title} \r\n                            deleteColumn={handleDeleteColumnItem} \r\n                            columnId={column.id}\r\n                            columnTasks={columnTasks}\r\n                            index={index}\r\n                            key={column.id} /> }) : null } \r\n                                                        \r\n                {provided.placeholder}\r\n\r\n              </UlColumns>\r\n            )}\r\n          </Droppable>\r\n\r\n          {isCreateColumn && \r\n            <CreateColumnForm \r\n              value={title} \r\n              setValue={setTitle} \r\n              addColumn={handleAddColumn} \r\n              resetAddingColumn={handleResetAddingColumn} /> }\r\n        \r\n          {!isCreateColumn && <Btn addColumn onClick={() => setIsCreateColumn(true)} >Add column +</Btn> }\r\n\r\n        </DragDropContext>        \r\n      </Columns>\r\n    </Container>\r\n  </>\r\n}","import { \r\n  ADD_COLUMN_ORDER,\r\n  REMOVE_COLUMN_ORDER,\r\n  SWITCH_COLUMN_ORDER\r\n } from \"./constants\";\r\n\r\nexport const addColumnOrder = (columnId) => ({\r\n  type: ADD_COLUMN_ORDER,\r\n  columnId\r\n});\r\n\r\nexport const removeColumnOrder = (columnId) => ({\r\n  type: REMOVE_COLUMN_ORDER,\r\n  columnId\r\n});\r\n\r\nexport const switchColumnOrder = (newOrder) => ({\r\n  type: SWITCH_COLUMN_ORDER,\r\n  newOrder\r\n});","import React from 'react';\r\n\r\nimport { ColumnList } from './components/ColumnList/ColumnList';\r\n\r\nconst App = () => {  \r\n  return (\r\n    <ColumnList />\r\n  )\r\n}\r\n\r\nexport default App;","const defaultStrategy = state => state;\r\n\r\nfunction createReducer(strategyMap, initialState) {\r\n  return (state = initialState, action) => (strategyMap[action.type] !== undefined\r\n    ? strategyMap[action.type](state, action)\r\n    : defaultStrategy(state, action));\r\n}\r\n\r\nexport default createReducer;","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './rootReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n\r\nconst configureStore = preloadedState => (\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(thunk)\r\n    ),\r\n  )\r\n);\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;","import createReducer from \"../../utils/createReducer\";\r\nimport {\r\n  ADD_COLUMN,\r\n  REMOVE_COLUMN,\r\n  ADD_TASK_ID,\r\n  REMOVE_TASK_ID,\r\n  SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN,\r\n  SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS,\r\n  RENAME_COLUMN\r\n} from \"./constants\";\r\n\r\nconst initialState = {\r\n  columnList: {},\r\n};\r\n\r\nconst updateColumnList = (state, { column }) => ({\r\n  ...state,\r\n  columnList: {...state.columnList, [column.id]: column}  \r\n});\r\n\r\nconst removeItemFromColumnList = (state, { id }) => {\r\n  delete state.columnList[id];\r\n\r\n  return {\r\n    ...state,\r\n    columnList: {...state.columnList}\r\n  }\r\n};\r\n\r\nconst addTaskIdToColumn = (state, { taskId, columnId }) => ({\r\n  ...state,\r\n  columnList: {\r\n    ...state.columnList,\r\n    [columnId]: {\r\n      ...state.columnList[columnId],\r\n      taskIds: [...state.columnList[columnId].taskIds, taskId]\r\n    }\r\n  } \r\n});\r\n\r\nconst removeTaskIdFromColumn = (state, { taskId, columnId }) => ({\r\n  ...state,\r\n  columnList: {\r\n    ...state.columnList,\r\n    [columnId]: {\r\n      ...state.columnList[columnId],\r\n      taskIds: [...state.columnList[columnId].taskIds.filter(id => id !== taskId)]\r\n    }\r\n  }\r\n});\r\n\r\nconst switchTasksOrderInTheSameColumn = (state, { column }) => ({\r\n  ...state,\r\n  columnList: {\r\n    ...state.columnList,\r\n    [column.id]: column,\r\n  }\r\n});\r\n\r\nconst switchTasksOrderInTheDifferentColumns = (state, { startColumn, finishColumn }) => ({\r\n  ...state,\r\n  columnList: {\r\n    ...state.columnList,\r\n    [startColumn.id]: startColumn,\r\n    [finishColumn.id]: finishColumn,\r\n  }\r\n});\r\n\r\nconst renameColumnTitle = (state, { id, title }) => ({\r\n  ...state,\r\n  columnList: {\r\n    ...state.columnList,\r\n    [id]: {\r\n      ...state.columnList[id],\r\n      title\r\n    }\r\n  }\r\n})\r\n\r\n\r\nconst strategyMap = {\r\n  [ADD_COLUMN]: updateColumnList,\r\n  [REMOVE_COLUMN]: removeItemFromColumnList,\r\n  [ADD_TASK_ID]: addTaskIdToColumn,\r\n  [REMOVE_TASK_ID]: removeTaskIdFromColumn,\r\n  [SWITCH_TASKS_ORDER_IN_THE_SAME_COLUMN]: switchTasksOrderInTheSameColumn,\r\n  [SWITCH_TASKS_ORDER_IN_THE_DIFFERENT_COLUMNS]: switchTasksOrderInTheDifferentColumns,\r\n  [RENAME_COLUMN]: renameColumnTitle\r\n};\r\n\r\nconst columnReducer = createReducer(strategyMap, initialState);\r\n\r\nexport default columnReducer;","import createReducer from \"../../utils/createReducer\";\r\n\r\nimport {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  ADD_DESCRIPTION,\r\n  RENAME_TASK\r\n} from \"./constants\";\r\n\r\nconst initialState = {\r\n  tasks: {}\r\n};\r\n\r\nconst addTaskToColumn = (state, { task }) => ({\r\n  ...state,\r\n  tasks: {...state.tasks, [task.id]: task}\r\n});\r\n\r\nconst removeTaskFromColumn = (state, { id }) => {\r\n  delete state.tasks[id];\r\n\r\n  return {\r\n    ...state,\r\n    tasks: {...state.tasks}\r\n  }\r\n};\r\n\r\nconst addTaskDescription = (state, { descriptionCard, id }) => ({\r\n  ...state,\r\n  tasks: {\r\n    ...state.tasks,\r\n    [id]: {\r\n      ...state.tasks[id],\r\n      descriptionCard\r\n    }\r\n  }\r\n});\r\n\r\nconst renameTaskInModal = (state, { id, value }) => ({\r\n  ...state,\r\n  tasks: {\r\n    ...state.tasks,\r\n    [id]: {\r\n      ...state.tasks[id],\r\n      titleCard: value\r\n    }\r\n  }\r\n});\r\n\r\nconst strategyMap = {\r\n  [ADD_TASK]: addTaskToColumn,\r\n  [REMOVE_TASK]: removeTaskFromColumn,\r\n  [ADD_DESCRIPTION]: addTaskDescription,\r\n  [RENAME_TASK]: renameTaskInModal\r\n};\r\n\r\nconst tasksReducer = createReducer(strategyMap, initialState);\r\n\r\nexport default tasksReducer;","import createReducer from \"../../utils/createReducer\";\r\n\r\nimport { \r\n  ADD_COLUMN_ORDER,\r\n  REMOVE_COLUMN_ORDER,\r\n  SWITCH_COLUMN_ORDER\r\n } from \"./constants\";\r\n\r\nconst initialState = {\r\n  columnOrder: []\r\n};\r\n\r\nconst addColumnOrder = (state, { columnId }) => ({\r\n  ...state,\r\n  columnOrder: [...state.columnOrder, columnId],\r\n});\r\n\r\nconst removeColumnOrder = (state, { columnId }) => ({\r\n  ...state,\r\n  columnOrder: state.columnOrder.filter(id => id !== columnId),\r\n});\r\n\r\nconst switchColumnOrder = (state, { newOrder }) => ({\r\n  ...state,\r\n  columnOrder: newOrder,\r\n});\r\n\r\nconst strategyMap = {\r\n  [ADD_COLUMN_ORDER]: addColumnOrder,\r\n  [REMOVE_COLUMN_ORDER]: removeColumnOrder,\r\n  [SWITCH_COLUMN_ORDER]: switchColumnOrder,\r\n};\r\n\r\nconst columnOrderReducer = createReducer(strategyMap, initialState);\r\n\r\nexport default columnOrderReducer;","import { combineReducers } from 'redux';\r\nimport columnReducer from './column/reducer';\r\nimport tasksReducer from './task/reducer';\r\nimport columnOrderReducer from './columnOrder/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  columns: columnReducer, \r\n  tasks: tasksReducer,\r\n  columnOrder: columnOrderReducer\r\n });\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.js';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n\r\nReactDOM.render((\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n), document.getElementById('root'));"],"sourceRoot":""}